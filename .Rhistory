# Train-Test Split
remove.packages('tidyverse')
# Train-Test Split
install.packages('tidyverse')
library(lubridate)
library(tidyverse)
# Train-Test Split
update.packages('rlang')
library(tidyverse)
update.packages()
update.packages()
# Train-Test Split
library(lubridate)
library(tidyverse)
update.packages()
# load('ml-pipeline.RData')
# rm(df_before_filtering,df3,df4,low_variance_filter,split_index,train_data,test_data,cols_to_mean,cols_to_mode,cols_to_sum,dont_rm_bldg_id,target_variable)
# colnames(df)
# # bldg-id, county and all 'out.' should not be used for a general predicting model
# model_table=df
# rm(df)
# model_table$hour=hour(model_table$time)
# model_table=model_table[,c(13,15:87)]
# model_table=model_table%>%filter(total>0)
load('temp.RData')
# Train-Test Split
library(lubridate)
library(randomForest)
library(caret)
model_table=model_table[,-c(7,54)]
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_table$total, p = 0.8, list = FALSE)
# Collect attributes list from linear model:
bad_attribute_list=c('in.bedrooms','in.ceiling_fanStandard Efficiency','in.city',
'in.clothes_dryer','in.clothes_washer','in.cooking_range',
'in.dishwasher','in.ducts','in.federal_poverty_level',
'in.geometry_foundation_type','in.geometry_garage','in.geometry_stories',
'in.geometry_wall_exterior_finish','in.geometry_wall_type','in.hvac_cooling_efficiency',
'in.hvac_has_zonal_electric_heating','in.hvac_heating_efficiency','in.income',
'in.income_recs_2020','in.insulation_ceiling','in.insulation_floor',
'in.insulation_wall',
'in.insulation_foundation_wall','in.insulation_slab','in.misc_extra_refrigerator',
'in.orientation','in.reeds_balancing_area','in.roof_material','in.tenure','in.vintage',
'in.water_heater_efficiency','in.weather_file_city','in.weather_file_latitude',
'in.windows')
model_table_less_col=model_table[, -which(names(model_table) %in% bad_attribute_list)]
# update train and test data
train_data <- model_table[split_index, ]
# update train and test data
train_data <- model_table[split_index, ]
test_data <- model_table[-split_index, ]
# Random forest regression
rf_energy <- randomForest(total ~ .,
data = train_data,
importance = TRUE,
ntree=400,
keep.forest=TRUE)
# update train and test data
train_data <- model_table_less_col[split_index, ]
test_data <- model_table_less_col[-split_index, ]
# Random forest regression
rf_energy <- randomForest(total ~ .,
data = train_data,
importance = TRUE,
ntree=400,
keep.forest=TRUE)
# update train and test data
split_index <- createDataPartition(model_table$total, p = 0.5, list = FALSE)
train_data <- model_table_less_col[split_index, ]
test_data <- model_table_less_col[-split_index, ]
# Random forest regression
rf_energy <- randomForest(total ~ .,
data = train_data,
importance = TRUE,
ntree=400,
keep.forest=TRUE)
colnames(model_table_less_col)
lm_model=lm(total~.,data=train_data)
lm_model_info=summary(lm_model)
lm_model_table=lm_model_info$coefficients%>%data.frame()
library(tidyverse)
lm_model_table=lm_model_info$coefficients%>%data.frame()
lm_model_info$adj.r.squared
View(lm_model_table)
colnames(lm_model_table)=c('Coefficient','StdError','t.value','Pr')
attributes_zero_effect=lm_model_table%>%filter(abs(Pr)>0.001)
View(attributes_zero_effect)
bad_attribute_list_new=c('in.ceiling_fan','in.hvac_heating_type','in.hvac_heating_type',
'in.income_recs_2015')
model_table_final=model_table[, -which(names(model_table) %in% bad_attribute_list_new)]
colnames(model_table_final)
model_table_final=model_table_less_col[, -which(names(model_table) %in% bad_attribute_list_new)]
model_table_less_col=model_table[, -which(names(model_table) %in% bad_attribute_list)]
# update train and test data
split_index <- createDataPartition(model_table$total, p = 0.8, list = FALSE)
# update train and test data
split_index <- createDataPartition(model_table$total, p = 0.8, list = FALSE)
train_data <- model_table_less_col[split_index, ]
test_data <- model_table_less_col[-split_index, ]
lm_model=lm(total~.,data=train_data)
lm_model_info=summary(lm_model)
lm_model_table=lm_model_info$coefficients%>%data.frame()
lm_model_info$adj.r.squared
colnames(lm_model_table)=c('Coefficient','StdError','t.value','Pr')
attributes_zero_effect=lm_model_table%>%filter(abs(Pr)>0.001)
View(attributes_zero_effect)
bad_attribute_list_new=c('in.hvac_heating_type','in.income_recs_2015')
model_table_final=model_table_less_col[, -which(names(model_table) %in% bad_attribute_list_new)]
# Random forest regression
rf_energy <- randomForest(total ~ .,
data = train_data,
importance = TRUE,
ntree=400,
keep.forest=TRUE)
predict_y=predict(lm_model,test_data)
predict_y[1]
result_table=data.frame(true=test_data$total,predict=predict_y)
View(result_table)
result_table$error=result_table$true-result_table$predict
RMSE=sqrt(mean(result_table$error^2))
RMSE
setwd("C:/IST687/IST687_Project")
load('temp.RData')
# Train-Test Split
library(lubridate)
library(tidyverse)
library(tidyverse)
library(randomForest)
library(caret)
# Exclude columns that only have 1 unique value now
model_exclude_list=c()
for (i in c(1:ncol(model_table))) {
if (length(unique(model_table[,i]))==1){
model_exclude_list=c(model_exclude_list,i)
}
rm(i)
}
colnames(model_table)[c(7,54)]
model_table=model_table[,-c(7,54)]
set.seed(123)  # for reproducibility
split_index <- createDataPartition(model_table$total, p = 0.8, list = FALSE)
split_index <- createDataPartition(model_table$total, p = 0.8, list = FALSE)
train_data <- model_table[split_index, ]
test_data <- model_table[-split_index, ]
lm_model=lm(total~.,data=train_data)
library(usethis)
usethis::edit_r_environ()
lm_model=lm(total~.,data=train_data)
